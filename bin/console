#!/usr/bin/env php
<?php

$root = dirname(__DIR__);

require "{$root}/vendor/autoload.php";

$process = new \App\Process();

$socketFile = '/tmp/socket.sock';

unlink($socketFile);

$unixSocketServer = new \App\IPC\UnixSockets\UnixSocketServer($socketFile, true);
$communicator = new \App\IPC\Communicator($unixSocketServer);

$communicator->setHandler(function ($message) use ($process) {
    $message = json_decode($message);
    $process->addToBuffer($message[0]);
});

$process->setCommunicator($communicator);

$countPI = function ($parameters) {
    $parameters['communicator']->open();
    
    $order = $parameters['order']; // номер процесса 
    $size = $parameters['processes_count']; // кол-во процессов всего 
    $n = $parameters['interval_count']; // кол-во интервалов

    $h = 1 / $n;
    $sum = 0;

    for ($i = $order + 1; $i <= $n; $i += $size) {
        $x = $h * ($i - 0.5);
        $sum += (4.0 / (1.0 + $x * $x));
    }

    $pi = $h * $sum;

    $parameters['communicator']->transmit((string) $pi);
    $parameters['communicator']->close();
};

$unixSocketClient = new \App\IPC\UnixSockets\UnixSocketClient($socketFile, true);
$communicator = new \App\IPC\Communicator($unixSocketClient);

$parameters = [
    'communicator' => $communicator,
    'processes_count' => 5,
    'interval_count' => 40000000
];

$countPI = \App\Process::bindParameters($countPI, $parameters);

$sumPI = function ($parameters) use ($process) {
    $PI = 3.141592653589793238462643;
    $pi = 0;
    $buffer = $process->getBuffer();

    foreach ($buffer as $value) {
        $pi += (float) $value;
    }

    echo sprintf("Exact PI = %.16f,\nCounted PI = %.16f,\nError = %.16f\n", $PI, $pi, abs($pi - $PI));
};


$process->addTask($countPI, $parameters['processes_count']);

$process->addExpectingTask($sumPI);

$process->start();